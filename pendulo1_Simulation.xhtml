<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>PÃªndulo Simples</title>
    <link rel="stylesheet"  type="text/css" href="library/css/ejss.css" />
    <script src="library/scripts/common_script.js"></script>
    <script src="library/scripts/textresizedetector.js"></script>
    <script src="library/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function pendulo1(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var mainWidth; // EjsS Model.Variables.display.mainWidth
  var centerWidth; // EjsS Model.Variables.display.centerWidth
  var middleHeight; // EjsS Model.Variables.display.middleHeight

  var xmin; // EjsS Model.Variables.Global.xmin
  var xmax; // EjsS Model.Variables.Global.xmax
  var ymin; // EjsS Model.Variables.Global.ymin
  var ymax; // EjsS Model.Variables.Global.ymax
  var Lx; // EjsS Model.Variables.Global.Lx
  var Ly; // EjsS Model.Variables.Global.Ly
  var g; // EjsS Model.Variables.Global.g
  var tmin; // EjsS Model.Variables.Global.tmin
  var tmax; // EjsS Model.Variables.Global.tmax

  var t; // EjsS Model.Variables.main.t
  var dt; // EjsS Model.Variables.main.dt
  var x; // EjsS Model.Variables.main.x
  var y; // EjsS Model.Variables.main.y
  var vx; // EjsS Model.Variables.main.vx
  var vy; // EjsS Model.Variables.main.vy
  var ax; // EjsS Model.Variables.main.ax
  var ay; // EjsS Model.Variables.main.ay
  var v; // EjsS Model.Variables.main.v
  var a; // EjsS Model.Variables.main.a

  var L; // EjsS Model.Variables.Pendulo.L
  var m; // EjsS Model.Variables.Pendulo.m
  var q; // EjsS Model.Variables.Pendulo.q
  var vq; // EjsS Model.Variables.Pendulo.vq
  var aq; // EjsS Model.Variables.Pendulo.aq
  var s; // EjsS Model.Variables.Pendulo.s
  var vs; // EjsS Model.Variables.Pendulo.vs
  var as; // EjsS Model.Variables.Pendulo.as
  var ar; // EjsS Model.Variables.Pendulo.ar
  var axt; // EjsS Model.Variables.Pendulo.axt
  var ayt; // EjsS Model.Variables.Pendulo.ayt
  var axr; // EjsS Model.Variables.Pendulo.axr
  var ayr; // EjsS Model.Variables.Pendulo.ayr
  var T; // EjsS Model.Variables.Pendulo.T
  var Tx; // EjsS Model.Variables.Pendulo.Tx
  var Ty; // EjsS Model.Variables.Pendulo.Ty
  var P; // EjsS Model.Variables.Pendulo.P
  var f; // EjsS Model.Variables.Pendulo.f
  var w; // EjsS Model.Variables.Pendulo.w
  var s_trace_pontos; // EjsS Model.Variables.Pendulo.s_trace_pontos
  var sx; // EjsS Model.Variables.Pendulo.sx
  var sy; // EjsS Model.Variables.Pendulo.sy
  var dsx; // EjsS Model.Variables.Pendulo.dsx
  var dsy; // EjsS Model.Variables.Pendulo.dsy

  var q1; // EjsS Model.Variables.Pendulo 2.q1
  var vq1; // EjsS Model.Variables.Pendulo 2.vq1
  var aq1; // EjsS Model.Variables.Pendulo 2.aq1
  var s1; // EjsS Model.Variables.Pendulo 2.s1
  var vs1; // EjsS Model.Variables.Pendulo 2.vs1
  var as1; // EjsS Model.Variables.Pendulo 2.as1
  var ar1; // EjsS Model.Variables.Pendulo 2.ar1
  var axt1; // EjsS Model.Variables.Pendulo 2.axt1
  var ayt1; // EjsS Model.Variables.Pendulo 2.ayt1
  var axr1; // EjsS Model.Variables.Pendulo 2.axr1
  var ayr1; // EjsS Model.Variables.Pendulo 2.ayr1
  var T1; // EjsS Model.Variables.Pendulo 2.T1
  var Tx1; // EjsS Model.Variables.Pendulo 2.Tx1
  var Ty1; // EjsS Model.Variables.Pendulo 2.Ty1
  var P1; // EjsS Model.Variables.Pendulo 2.P1
  var f1; // EjsS Model.Variables.Pendulo 2.f1
  var w1; // EjsS Model.Variables.Pendulo 2.w1
  var sx1; // EjsS Model.Variables.Pendulo 2.sx1
  var sy1; // EjsS Model.Variables.Pendulo 2.sy1
  var dsx1; // EjsS Model.Variables.Pendulo 2.dsx1
  var dsy1; // EjsS Model.Variables.Pendulo 2.dsy1

  var view_r; // EjsS Model.Variables.viewFlags.view_r
  var view_s; // EjsS Model.Variables.viewFlags.view_s
  var view_v; // EjsS Model.Variables.viewFlags.view_v
  var view_vs; // EjsS Model.Variables.viewFlags.view_vs
  var view_a; // EjsS Model.Variables.viewFlags.view_a
  var view_as; // EjsS Model.Variables.viewFlags.view_as
  var view_end; // EjsS Model.Variables.viewFlags.view_end
  var view_T; // EjsS Model.Variables.viewFlags.view_T
  var view_P; // EjsS Model.Variables.viewFlags.view_P
  var view_pendulo2; // EjsS Model.Variables.viewFlags.view_pendulo2

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      mainWidth : mainWidth,
      centerWidth : centerWidth,
      middleHeight : middleHeight,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      Lx : Lx,
      Ly : Ly,
      g : g,
      tmin : tmin,
      tmax : tmax,
      t : t,
      dt : dt,
      x : x,
      y : y,
      vx : vx,
      vy : vy,
      ax : ax,
      ay : ay,
      v : v,
      a : a,
      L : L,
      m : m,
      q : q,
      vq : vq,
      aq : aq,
      s : s,
      vs : vs,
      as : as,
      ar : ar,
      axt : axt,
      ayt : ayt,
      axr : axr,
      ayr : ayr,
      T : T,
      Tx : Tx,
      Ty : Ty,
      P : P,
      f : f,
      w : w,
      s_trace_pontos : s_trace_pontos,
      sx : sx,
      sy : sy,
      dsx : dsx,
      dsy : dsy,
      q1 : q1,
      vq1 : vq1,
      aq1 : aq1,
      s1 : s1,
      vs1 : vs1,
      as1 : as1,
      ar1 : ar1,
      axt1 : axt1,
      ayt1 : ayt1,
      axr1 : axr1,
      ayr1 : ayr1,
      T1 : T1,
      Tx1 : Tx1,
      Ty1 : Ty1,
      P1 : P1,
      f1 : f1,
      w1 : w1,
      sx1 : sx1,
      sy1 : sy1,
      dsx1 : dsx1,
      dsy1 : dsy1,
      view_r : view_r,
      view_s : view_s,
      view_v : view_v,
      view_vs : view_vs,
      view_a : view_a,
      view_as : view_as,
      view_end : view_end,
      view_T : view_T,
      view_P : view_P,
      view_pendulo2 : view_pendulo2
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      mainWidth : mainWidth,
      centerWidth : centerWidth,
      middleHeight : middleHeight,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      Lx : Lx,
      Ly : Ly,
      g : g,
      tmin : tmin,
      tmax : tmax,
      t : t,
      dt : dt,
      x : x,
      y : y,
      vx : vx,
      vy : vy,
      ax : ax,
      ay : ay,
      v : v,
      a : a,
      L : L,
      m : m,
      q : q,
      vq : vq,
      aq : aq,
      s : s,
      vs : vs,
      as : as,
      ar : ar,
      axt : axt,
      ayt : ayt,
      axr : axr,
      ayr : ayr,
      T : T,
      Tx : Tx,
      Ty : Ty,
      P : P,
      f : f,
      w : w,
      s_trace_pontos : s_trace_pontos,
      sx : sx,
      sy : sy,
      dsx : dsx,
      dsy : dsy,
      q1 : q1,
      vq1 : vq1,
      aq1 : aq1,
      s1 : s1,
      vs1 : vs1,
      as1 : as1,
      ar1 : ar1,
      axt1 : axt1,
      ayt1 : ayt1,
      axr1 : axr1,
      ayr1 : ayr1,
      T1 : T1,
      Tx1 : Tx1,
      Ty1 : Ty1,
      P1 : P1,
      f1 : f1,
      w1 : w1,
      sx1 : sx1,
      sy1 : sy1,
      dsx1 : dsx1,
      dsy1 : dsy1,
      view_r : view_r,
      view_s : view_s,
      view_v : view_v,
      view_vs : view_vs,
      view_a : view_a,
      view_as : view_as,
      view_end : view_end,
      view_T : view_T,
      view_P : view_P,
      view_pendulo2 : view_pendulo2
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.mainWidth != "undefined") mainWidth = json.mainWidth;
    if(typeof json.centerWidth != "undefined") centerWidth = json.centerWidth;
    if(typeof json.middleHeight != "undefined") middleHeight = json.middleHeight;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.Lx != "undefined") Lx = json.Lx;
    if(typeof json.Ly != "undefined") Ly = json.Ly;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.tmin != "undefined") tmin = json.tmin;
    if(typeof json.tmax != "undefined") tmax = json.tmax;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.ax != "undefined") ax = json.ax;
    if(typeof json.ay != "undefined") ay = json.ay;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.L != "undefined") L = json.L;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.q != "undefined") q = json.q;
    if(typeof json.vq != "undefined") vq = json.vq;
    if(typeof json.aq != "undefined") aq = json.aq;
    if(typeof json.s != "undefined") s = json.s;
    if(typeof json.vs != "undefined") vs = json.vs;
    if(typeof json.as != "undefined") as = json.as;
    if(typeof json.ar != "undefined") ar = json.ar;
    if(typeof json.axt != "undefined") axt = json.axt;
    if(typeof json.ayt != "undefined") ayt = json.ayt;
    if(typeof json.axr != "undefined") axr = json.axr;
    if(typeof json.ayr != "undefined") ayr = json.ayr;
    if(typeof json.T != "undefined") T = json.T;
    if(typeof json.Tx != "undefined") Tx = json.Tx;
    if(typeof json.Ty != "undefined") Ty = json.Ty;
    if(typeof json.P != "undefined") P = json.P;
    if(typeof json.f != "undefined") f = json.f;
    if(typeof json.w != "undefined") w = json.w;
    if(typeof json.s_trace_pontos != "undefined") s_trace_pontos = json.s_trace_pontos;
    if(typeof json.sx != "undefined") sx = json.sx;
    if(typeof json.sy != "undefined") sy = json.sy;
    if(typeof json.dsx != "undefined") dsx = json.dsx;
    if(typeof json.dsy != "undefined") dsy = json.dsy;
    if(typeof json.q1 != "undefined") q1 = json.q1;
    if(typeof json.vq1 != "undefined") vq1 = json.vq1;
    if(typeof json.aq1 != "undefined") aq1 = json.aq1;
    if(typeof json.s1 != "undefined") s1 = json.s1;
    if(typeof json.vs1 != "undefined") vs1 = json.vs1;
    if(typeof json.as1 != "undefined") as1 = json.as1;
    if(typeof json.ar1 != "undefined") ar1 = json.ar1;
    if(typeof json.axt1 != "undefined") axt1 = json.axt1;
    if(typeof json.ayt1 != "undefined") ayt1 = json.ayt1;
    if(typeof json.axr1 != "undefined") axr1 = json.axr1;
    if(typeof json.ayr1 != "undefined") ayr1 = json.ayr1;
    if(typeof json.T1 != "undefined") T1 = json.T1;
    if(typeof json.Tx1 != "undefined") Tx1 = json.Tx1;
    if(typeof json.Ty1 != "undefined") Ty1 = json.Ty1;
    if(typeof json.P1 != "undefined") P1 = json.P1;
    if(typeof json.f1 != "undefined") f1 = json.f1;
    if(typeof json.w1 != "undefined") w1 = json.w1;
    if(typeof json.sx1 != "undefined") sx1 = json.sx1;
    if(typeof json.sy1 != "undefined") sy1 = json.sy1;
    if(typeof json.dsx1 != "undefined") dsx1 = json.dsx1;
    if(typeof json.dsy1 != "undefined") dsy1 = json.dsy1;
    if(typeof json.view_r != "undefined") view_r = json.view_r;
    if(typeof json.view_s != "undefined") view_s = json.view_s;
    if(typeof json.view_v != "undefined") view_v = json.view_v;
    if(typeof json.view_vs != "undefined") view_vs = json.view_vs;
    if(typeof json.view_a != "undefined") view_a = json.view_a;
    if(typeof json.view_as != "undefined") view_as = json.view_as;
    if(typeof json.view_end != "undefined") view_end = json.view_end;
    if(typeof json.view_T != "undefined") view_T = json.view_T;
    if(typeof json.view_P != "undefined") view_P = json.view_P;
    if(typeof json.view_pendulo2 != "undefined") view_pendulo2 = json.view_pendulo2;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.mainWidth != "undefined") mainWidth = json.mainWidth;
    if(typeof json.centerWidth != "undefined") centerWidth = json.centerWidth;
    if(typeof json.middleHeight != "undefined") middleHeight = json.middleHeight;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.Lx != "undefined") Lx = json.Lx;
    if(typeof json.Ly != "undefined") Ly = json.Ly;
    if(typeof json.g != "undefined") g = json.g;
    if(typeof json.tmin != "undefined") tmin = json.tmin;
    if(typeof json.tmax != "undefined") tmax = json.tmax;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.vx != "undefined") vx = json.vx;
    if(typeof json.vy != "undefined") vy = json.vy;
    if(typeof json.ax != "undefined") ax = json.ax;
    if(typeof json.ay != "undefined") ay = json.ay;
    if(typeof json.v != "undefined") v = json.v;
    if(typeof json.a != "undefined") a = json.a;
    if(typeof json.L != "undefined") L = json.L;
    if(typeof json.m != "undefined") m = json.m;
    if(typeof json.q != "undefined") q = json.q;
    if(typeof json.vq != "undefined") vq = json.vq;
    if(typeof json.aq != "undefined") aq = json.aq;
    if(typeof json.s != "undefined") s = json.s;
    if(typeof json.vs != "undefined") vs = json.vs;
    if(typeof json.as != "undefined") as = json.as;
    if(typeof json.ar != "undefined") ar = json.ar;
    if(typeof json.axt != "undefined") axt = json.axt;
    if(typeof json.ayt != "undefined") ayt = json.ayt;
    if(typeof json.axr != "undefined") axr = json.axr;
    if(typeof json.ayr != "undefined") ayr = json.ayr;
    if(typeof json.T != "undefined") T = json.T;
    if(typeof json.Tx != "undefined") Tx = json.Tx;
    if(typeof json.Ty != "undefined") Ty = json.Ty;
    if(typeof json.P != "undefined") P = json.P;
    if(typeof json.f != "undefined") f = json.f;
    if(typeof json.w != "undefined") w = json.w;
    if(typeof json.s_trace_pontos != "undefined") s_trace_pontos = json.s_trace_pontos;
    if(typeof json.sx != "undefined") sx = json.sx;
    if(typeof json.sy != "undefined") sy = json.sy;
    if(typeof json.dsx != "undefined") dsx = json.dsx;
    if(typeof json.dsy != "undefined") dsy = json.dsy;
    if(typeof json.q1 != "undefined") q1 = json.q1;
    if(typeof json.vq1 != "undefined") vq1 = json.vq1;
    if(typeof json.aq1 != "undefined") aq1 = json.aq1;
    if(typeof json.s1 != "undefined") s1 = json.s1;
    if(typeof json.vs1 != "undefined") vs1 = json.vs1;
    if(typeof json.as1 != "undefined") as1 = json.as1;
    if(typeof json.ar1 != "undefined") ar1 = json.ar1;
    if(typeof json.axt1 != "undefined") axt1 = json.axt1;
    if(typeof json.ayt1 != "undefined") ayt1 = json.ayt1;
    if(typeof json.axr1 != "undefined") axr1 = json.axr1;
    if(typeof json.ayr1 != "undefined") ayr1 = json.ayr1;
    if(typeof json.T1 != "undefined") T1 = json.T1;
    if(typeof json.Tx1 != "undefined") Tx1 = json.Tx1;
    if(typeof json.Ty1 != "undefined") Ty1 = json.Ty1;
    if(typeof json.P1 != "undefined") P1 = json.P1;
    if(typeof json.f1 != "undefined") f1 = json.f1;
    if(typeof json.w1 != "undefined") w1 = json.w1;
    if(typeof json.sx1 != "undefined") sx1 = json.sx1;
    if(typeof json.sy1 != "undefined") sy1 = json.sy1;
    if(typeof json.dsx1 != "undefined") dsx1 = json.dsx1;
    if(typeof json.dsy1 != "undefined") dsy1 = json.dsy1;
    if(typeof json.view_r != "undefined") view_r = json.view_r;
    if(typeof json.view_s != "undefined") view_s = json.view_s;
    if(typeof json.view_v != "undefined") view_v = json.view_v;
    if(typeof json.view_vs != "undefined") view_vs = json.view_vs;
    if(typeof json.view_a != "undefined") view_a = json.view_a;
    if(typeof json.view_as != "undefined") view_as = json.view_as;
    if(typeof json.view_end != "undefined") view_end = json.view_end;
    if(typeof json.view_T != "undefined") view_T = json.view_T;
    if(typeof json.view_P != "undefined") view_P = json.view_P;
    if(typeof json.view_pendulo2 != "undefined") view_pendulo2 = json.view_pendulo2;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["ODES"] = true;
    __pagesEnabled["fixed"] = true;
  });

  _model.addToReset(function() {
    mainWidth = (_isMobile||_isEPub)?"400px":"600px"; // EjsS Model.Variables.display.mainWidth
    centerWidth = (_isMobile||_isEPub)?"300px":"500px"; // EjsS Model.Variables.display.centerWidth
    middleHeight = (_isMobile||_isEPub)?"350px":"400px"; // EjsS Model.Variables.display.middleHeight
  });

  _model.addToReset(function() {
    xmin = -10.0; // EjsS Model.Variables.Global.xmin
    xmax = 10; // EjsS Model.Variables.Global.xmax
    ymin = -19; // EjsS Model.Variables.Global.ymin
    ymax = 1; // EjsS Model.Variables.Global.ymax
    Lx = xmax-xmin; // EjsS Model.Variables.Global.Lx
    Ly = ymax-ymin; // EjsS Model.Variables.Global.Ly
    g = 9.82; // EjsS Model.Variables.Global.g
    tmin = 0; // EjsS Model.Variables.Global.tmin
    tmax = 50; // EjsS Model.Variables.Global.tmax
  });

  _model.addToReset(function() {
    t = 0; // EjsS Model.Variables.main.t
    dt = 0.001; // EjsS Model.Variables.main.dt
    x = 2; // EjsS Model.Variables.main.x
    y = 0; // EjsS Model.Variables.main.y
    vx = 0; // EjsS Model.Variables.main.vx
    vy = 0; // EjsS Model.Variables.main.vy
    ax = 0; // EjsS Model.Variables.main.ax
    ay = 0; // EjsS Model.Variables.main.ay
    v = 0; // EjsS Model.Variables.main.v
    a = 0; // EjsS Model.Variables.main.a
  });

  _model.addToReset(function() {
    L = 10; // EjsS Model.Variables.Pendulo.L
    m = 1; // EjsS Model.Variables.Pendulo.m
    q = Math.PI/9; // EjsS Model.Variables.Pendulo.q
    vq = 0; // EjsS Model.Variables.Pendulo.vq
    aq = 0; // EjsS Model.Variables.Pendulo.aq
    s = L*q; // EjsS Model.Variables.Pendulo.s
    vs = L*vq; // EjsS Model.Variables.Pendulo.vs
    as = L*aq; // EjsS Model.Variables.Pendulo.as
    ar = L*vq*vq; // EjsS Model.Variables.Pendulo.ar
    T = m*g*Math.cos(q)+m*L*vq*vq; // EjsS Model.Variables.Pendulo.T
    Tx = -T*Math.sin(q);; // EjsS Model.Variables.Pendulo.Tx
    Ty = T*Math.cos(q);; // EjsS Model.Variables.Pendulo.Ty
    P = m*g; // EjsS Model.Variables.Pendulo.P
    s_trace_pontos = 10; // EjsS Model.Variables.Pendulo.s_trace_pontos
    sx = new Array(s_trace_pontos); // EjsS Model.Variables.Pendulo.sx
    sy = new Array(s_trace_pontos); // EjsS Model.Variables.Pendulo.sy
    dsx = new Array(s_trace_pontos); // EjsS Model.Variables.Pendulo.dsx
    dsy = new Array(s_trace_pontos); // EjsS Model.Variables.Pendulo.dsy
  });

  _model.addToReset(function() {
    q1 = Math.PI/9; // EjsS Model.Variables.Pendulo 2.q1
    vq1 = 0; // EjsS Model.Variables.Pendulo 2.vq1
    aq1 = 0; // EjsS Model.Variables.Pendulo 2.aq1
    s1 = L*q; // EjsS Model.Variables.Pendulo 2.s1
    vs1 = L*vq; // EjsS Model.Variables.Pendulo 2.vs1
    as1 = L*aq; // EjsS Model.Variables.Pendulo 2.as1
    ar1 = L*vq*vq; // EjsS Model.Variables.Pendulo 2.ar1
    T1 = m*g*Math.cos(q)+m*L*vq*vq; // EjsS Model.Variables.Pendulo 2.T1
    Tx1 = -T*Math.sin(q);; // EjsS Model.Variables.Pendulo 2.Tx1
    Ty1 = T*Math.cos(q);; // EjsS Model.Variables.Pendulo 2.Ty1
    P1 = m*g; // EjsS Model.Variables.Pendulo 2.P1
    sx1 = new Array(s_trace_pontos); // EjsS Model.Variables.Pendulo 2.sx1
    sy1 = new Array(s_trace_pontos); // EjsS Model.Variables.Pendulo 2.sy1
    dsx1 = new Array(s_trace_pontos); // EjsS Model.Variables.Pendulo 2.dsx1
    dsy1 = new Array(s_trace_pontos); // EjsS Model.Variables.Pendulo 2.dsy1
  });

  _model.addToReset(function() {
    view_r = false; // EjsS Model.Variables.viewFlags.view_r
    view_s = false; // EjsS Model.Variables.viewFlags.view_s
    view_v = false; // EjsS Model.Variables.viewFlags.view_v
    view_vs = false; // EjsS Model.Variables.viewFlags.view_vs
    view_a = false; // EjsS Model.Variables.viewFlags.view_a
    view_as = false; // EjsS Model.Variables.viewFlags.view_as
    view_end = false; // EjsS Model.Variables.viewFlags.view_end
    view_T = false; // EjsS Model.Variables.viewFlags.view_T
    view_P = false; // EjsS Model.Variables.viewFlags.view_P
    view_pendulo2 = false; // EjsS Model.Variables.viewFlags.view_pendulo2
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(200);
  });

  function strace () {  // > CustomCode.strace:1
    var dq = q/(s_trace_pontos-1);  // > CustomCode.strace:2
    sx[0]=0;  // > CustomCode.strace:3
    sy[0]=-L;  // > CustomCode.strace:4
    dsx[0] = L*dq;  // > CustomCode.strace:5
    dsy[0] = 0;  // > CustomCode.strace:6
    for(var i=1; i< s_trace_pontos; i++){  // > CustomCode.strace:7
        sx[i] =  L*Math.sin(i*dq);  // > CustomCode.strace:8
        sy[i] = -L*Math.cos(i*dq);  // > CustomCode.strace:9
        dsx[i]=sx[i]-sx[i-1];  // > CustomCode.strace:10
        dsy[i]=sy[i]-sy[i-1];  // > CustomCode.strace:11
    }  // > CustomCode.strace:12
  }  // > CustomCode.strace:13

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    var sin_q = Math.sin(q);  // > Initialization.Init Page:1
    var cos_q = Math.cos(q);  // > Initialization.Init Page:2
    //aq = -g*Math.sin(q)  // > Initialization.Init Page:3
    aq = -g*q/L; // d^2 q/dt^2  // > Initialization.Init Page:4
    s = L*q;  // > Initialization.Init Page:5
    vs = L*vq;  // > Initialization.Init Page:6
    as = L*aq  // > Initialization.Init Page:7
    ar = -L*vq*vq;  // > Initialization.Init Page:8
    x =  L*sin_q;  // > Initialization.Init Page:9
    y = -L*cos_q;  // > Initialization.Init Page:10
    // velocity has only tangencial component  // > Initialization.Init Page:11
    vx = vs*cos_q;  // > Initialization.Init Page:12
    vy = vs*sin_q;  // > Initialization.Init Page:13
    ax = as*cos_q + ar*sin_q;  // > Initialization.Init Page:14
    ay = as*sin_q - ar*cos_q;  // > Initialization.Init Page:15
    // this is the talgencial component of acceleration  // > Initialization.Init Page:16
    axt =  as*cos_q;  // > Initialization.Init Page:17
    ayt =  as*sin_q;  // > Initialization.Init Page:18
    axr =  ar*sin_q;  // > Initialization.Init Page:19
    ayr = -ar*cos_q;  // > Initialization.Init Page:20
    T = m*g*cos_q-m*ar;  // > Initialization.Init Page:21
    Tx = -T*sin_q;  // > Initialization.Init Page:22
    Ty =  T*cos_q;  // > Initialization.Init Page:23
    //---------------------------------------  // > Initialization.Init Page:24
    var sin_q1 = Math.sin(q1);  // > Initialization.Init Page:25
    var cos_q1 = Math.cos(q1);  // > Initialization.Init Page:26
    //aq = -g*Math.sin(q)  // > Initialization.Init Page:27
    aq1 = -g*sin_q1/L; // d^2 q/dt^2  // > Initialization.Init Page:28
    s1 = L*q1;  // > Initialization.Init Page:29
    vs1 = L*vq1;  // > Initialization.Init Page:30
    as1 = L*aq1  // > Initialization.Init Page:31
    ar1 = -L*vq1*vq1;  // > Initialization.Init Page:32
    x1 =  L*sin_q1;  // > Initialization.Init Page:33
    y1 = -L*cos_q1;  // > Initialization.Init Page:34
    // velocity has only tangencial component  // > Initialization.Init Page:35
    vx1 = vs*cos_q1;  // > Initialization.Init Page:36
    vy1 = vs*sin_q1;  // > Initialization.Init Page:37
    ax1 = as1*cos_q1 + ar1*sin_q1;  // > Initialization.Init Page:38
    ay1 = as1*sin_q1 - ar1*cos_q1;  // > Initialization.Init Page:39
    // this is the talgencial component of acceleration  // > Initialization.Init Page:40
    axt1 =  as1*cos_q1;  // > Initialization.Init Page:41
    ayt1 =  as1*sin_q1;  // > Initialization.Init Page:42
    axr1 =  ar1*sin_q1;  // > Initialization.Init Page:43
    ayr1 = -ar1*cos_q1;  // > Initialization.Init Page:44
    T = m*g*cos_q-m*ar;  // > Initialization.Init Page:45
    Tx = -T*sin_q;  // > Initialization.Init Page:46
    Ty =  T*cos_q;  // > Initialization.Init Page:47
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["ODES"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["fixed"]) return;
    var sin_q = Math.sin(q);  // > FixedRelations.fixed:1
    var cos_q = Math.cos(q);  // > FixedRelations.fixed:2
    //aq = -g*Math.sin(q)  // > FixedRelations.fixed:3
    aq = -g*q/L; // d^2 q/dt^2  // > FixedRelations.fixed:4
    s = L*q;  // > FixedRelations.fixed:5
    vs = L*vq;  // > FixedRelations.fixed:6
    as = L*aq  // > FixedRelations.fixed:7
    ar = -L*vq*vq;  // > FixedRelations.fixed:8
    x =  L*sin_q;  // > FixedRelations.fixed:9
    y = -L*cos_q;  // > FixedRelations.fixed:10
    // velocity has only tangencial component  // > FixedRelations.fixed:11
    vx = vs*cos_q;  // > FixedRelations.fixed:12
    vy = vs*sin_q;  // > FixedRelations.fixed:13
    ax = as*cos_q + ar*sin_q;  // > FixedRelations.fixed:14
    ay = as*sin_q - ar*cos_q;  // > FixedRelations.fixed:15
    // this is the talgencial component of acceleration  // > FixedRelations.fixed:16
    axt =  as*cos_q;  // > FixedRelations.fixed:17
    ayt =  as*sin_q;  // > FixedRelations.fixed:18
    axr =  ar*sin_q;  // > FixedRelations.fixed:19
    ayr = -ar*cos_q;  // > FixedRelations.fixed:20
    T = m*g*cos_q-m*ar;  // > FixedRelations.fixed:21
    Tx = -T*sin_q;  // > FixedRelations.fixed:22
    Ty =  T*cos_q;  // > FixedRelations.fixed:23
    //---------------------------------------  // > FixedRelations.fixed:24
    var sin_q1 = Math.sin(q1);  // > FixedRelations.fixed:25
    var cos_q1 = Math.cos(q1);  // > FixedRelations.fixed:26
    //aq = -g*Math.sin(q)  // > FixedRelations.fixed:27
    aq1 = -g*sin_q1/L; // d^2 q/dt^2  // > FixedRelations.fixed:28
    s1 = L*q1;  // > FixedRelations.fixed:29
    vs1 = L*vq1;  // > FixedRelations.fixed:30
    as1 = L*aq1  // > FixedRelations.fixed:31
    ar1 = -L*vq1*vq1;  // > FixedRelations.fixed:32
    x1 =  L*sin_q1;  // > FixedRelations.fixed:33
    y1 = -L*cos_q1;  // > FixedRelations.fixed:34
    // velocity has only tangencial component  // > FixedRelations.fixed:35
    vx1 = vs*cos_q1;  // > FixedRelations.fixed:36
    vy1 = vs*sin_q1;  // > FixedRelations.fixed:37
    ax1 = as1*cos_q1 + ar1*sin_q1;  // > FixedRelations.fixed:38
    ay1 = as1*sin_q1 - ar1*cos_q1;  // > FixedRelations.fixed:39
    // this is the talgencial component of acceleration  // > FixedRelations.fixed:40
    axt1 =  as1*cos_q1;  // > FixedRelations.fixed:41
    ayt1 =  as1*sin_q1;  // > FixedRelations.fixed:42
    axr1 =  ar1*sin_q1;  // > FixedRelations.fixed:43
    ayr1 = -ar1*cos_q1;  // > FixedRelations.fixed:44
    T = m*g*cos_q-m*ar;  // > FixedRelations.fixed:45
    Tx = -T*sin_q;  // > FixedRelations.fixed:46
    Ty =  T*cos_q;  // > FixedRelations.fixed:47
    strace();  // > FixedRelations.fixed:48
    var tt = 50;  // > FixedRelations.fixed:49
    if(t>1 && Math.abs(t%tt)< 1e-3){  // > FixedRelations.fixed:50
      tmin = tmin+0.8*tt;  // > FixedRelations.fixed:51
      tmax = tmax+0.8*tt;  // > FixedRelations.fixed:52
    }  // > FixedRelations.fixed:53
    if(t>500) {  // > FixedRelations.fixed:54
        _pause();  // > FixedRelations.fixed:55
        view_end=true;  // > FixedRelations.fixed:56
    }  // > FixedRelations.fixed:57
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="ODES") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["q","vq","q1","vq1","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(true);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=q) __mustReinitialize = true;
        __state[__cIn++] = q;
        if (__state[__cIn]!=vq) __mustReinitialize = true;
        __state[__cIn++] = vq;
        if (__state[__cIn]!=q1) __mustReinitialize = true;
        __state[__cIn++] = q1;
        if (__state[__cIn]!=vq1) __mustReinitialize = true;
        __state[__cIn++] = vq1;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) { 
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) { 
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        q = __state[__cOut++];
        vq = __state[__cOut++];
        q1 = __state[__cOut++];
        vq1 = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var q = _aState[__cOut++];
        var vq = _aState[__cOut++];
        var q1 = _aState[__cOut++];
        var vq1 = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = vq; // Rate for ODE: ODES:q
        _aRate[__cRate++] = aq; // Rate for ODE: ODES:vq
        _aRate[__cRate++] = vq1; // Rate for ODE: ODES:q1
        _aRate[__cRate++] = aq1; // Rate for ODE: ODES:vq1
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) { 
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var q = _aState[__cOut++];
        var vq = _aState[__cOut++];
        var q1 = _aState[__cOut++];
        var vq1 = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() { 
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        q = __state[__cOut++];
        vq = __state[__cOut++];
        q1 = __state[__cOut++];
        vq1 = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[] 
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = q;
        __state[__cIn++] = vq;
        __state[__cIn++] = q1;
        __state[__cIn++] = vq1;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_q(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_vq(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_q1(__time) {
    var __index = 0 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_vq1(__time) {
    var __index = 0 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new pendulo1_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.tablePanel.linkProperty("Width",  function() { return mainWidth; }, function(_v) { mainWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'tablePanel'
          _view.topPanel.linkProperty("Width",  function() { return mainWidth; }, function(_v) { mainWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'topPanel'
          _view.slider2.linkProperty("Value",  function() { return L; }, function(_v) { L = _v; } ); // HtmlView Page linking property 'Value' for element 'slider2'
          _view.slider2.setAction("OnChange", function(_data,_info) {
  _initialize();
  t=0;

}); // HtmlView Page setting action 'OnChange' for element 'slider2'
          _view.slider22.linkProperty("Value",  function() { return m; }, function(_v) { m = _v; } ); // HtmlView Page linking property 'Value' for element 'slider22'
          _view.slider22.setAction("OnChange", function(_data,_info) {
  _initialize();
  t=0;

}); // HtmlView Page setting action 'OnChange' for element 'slider22'
          _view.middlePanel.linkProperty("Height",  function() { return middleHeight; }, function(_v) { middleHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'middlePanel'
          _view.middlePanel.linkProperty("Width",  function() { return mainWidth; }, function(_v) { mainWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'middlePanel'
          _view.leftPanel.linkProperty("Height",  function() { return middleHeight; }, function(_v) { middleHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'leftPanel'
          _view.centerPanel.linkProperty("Height",  function() { return middleHeight; }, function(_v) { middleHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'centerPanel'
          _view.centerPanel.linkProperty("Width",  function() { return centerWidth; }, function(_v) { centerWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'centerPanel'
          _view.plottingPanel.linkProperty("MinimumX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.x_axis.linkProperty("SizeX",  function() { return xmax-xmin; } ); // HtmlView Page linking property 'SizeX' for element 'x_axis'
          _view.y_axis.linkProperty("Y",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'Y' for element 'y_axis'
          _view.y_axis.linkProperty("SizeY",  function() { return ymax-ymin; } ); // HtmlView Page linking property 'SizeY' for element 'y_axis'
          _view.fio.linkProperty("SizeX",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'SizeX' for element 'fio'
          _view.fio.linkProperty("SizeY",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'SizeY' for element 'fio'
          _view.fio2.linkProperty("SizeX",  function() { return x1; } ); // HtmlView Page linking property 'SizeX' for element 'fio2'
          _view.fio2.linkProperty("Visibility",  function() { return view_pendulo2; }, function(_v) { view_pendulo2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'fio2'
          _view.fio2.linkProperty("SizeY",  function() { return y1; } ); // HtmlView Page linking property 'SizeY' for element 'fio2'
          _view.particula.linkProperty("SizeX",  function() { return 20*m; } ); // HtmlView Page linking property 'SizeX' for element 'particula'
          _view.particula.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'particula'
          _view.particula.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'particula'
          _view.particula.linkProperty("SizeY",  function() { return 20*m; } ); // HtmlView Page linking property 'SizeY' for element 'particula'
          _view.particula.setAction("OnDrag", function(_data,_info) {
  t=0;
  vq=0;
  q = Math.asin(x/L);
  vq1=0;
  q1 = Math.asin(x/L);
  x1=x
  y1=y
  _initialize();

}); // HtmlView Page setting action 'OnDrag' for element 'particula'
          _view.particula2.linkProperty("SizeX",  function() { return 20*m; } ); // HtmlView Page linking property 'SizeX' for element 'particula2'
          _view.particula2.linkProperty("X",  function() { return x1; } ); // HtmlView Page linking property 'X' for element 'particula2'
          _view.particula2.linkProperty("Y",  function() { return y1; } ); // HtmlView Page linking property 'Y' for element 'particula2'
          _view.particula2.linkProperty("Visibility",  function() { return view_pendulo2; }, function(_v) { view_pendulo2 = _v; } ); // HtmlView Page linking property 'Visibility' for element 'particula2'
          _view.particula2.linkProperty("SizeY",  function() { return 20*m; } ); // HtmlView Page linking property 'SizeY' for element 'particula2'
          _view.s_trace.linkProperty("NumberOfElements",  function() { return s_trace_pontos-1; } ); // HtmlView Page linking property 'NumberOfElements' for element 's_trace'
          _view.s_trace.linkProperty("SizeX",  function() { return dsx; }, function(_v) { dsx = _v; } ); // HtmlView Page linking property 'SizeX' for element 's_trace'
          _view.s_trace.linkProperty("X",  function() { return sx; }, function(_v) { sx = _v; } ); // HtmlView Page linking property 'X' for element 's_trace'
          _view.s_trace.linkProperty("Y",  function() { return sy; }, function(_v) { sy = _v; } ); // HtmlView Page linking property 'Y' for element 's_trace'
          _view.s_trace.linkProperty("Visibility",  function() { return view_s; }, function(_v) { view_s = _v; } ); // HtmlView Page linking property 'Visibility' for element 's_trace'
          _view.s_trace.linkProperty("SizeY",  function() { return dsy; }, function(_v) { dsy = _v; } ); // HtmlView Page linking property 'SizeY' for element 's_trace'
          _view.s_trace2.linkProperty("NumberOfElements",  function() { return s_trace_pontos-1; } ); // HtmlView Page linking property 'NumberOfElements' for element 's_trace2'
          _view.s_trace2.linkProperty("SizeX",  function() { return dsx1; }, function(_v) { dsx1 = _v; } ); // HtmlView Page linking property 'SizeX' for element 's_trace2'
          _view.s_trace2.linkProperty("X",  function() { return sx1; }, function(_v) { sx1 = _v; } ); // HtmlView Page linking property 'X' for element 's_trace2'
          _view.s_trace2.linkProperty("Y",  function() { return sy1; }, function(_v) { sy1 = _v; } ); // HtmlView Page linking property 'Y' for element 's_trace2'
          _view.s_trace2.linkProperty("Visibility",  function() { return view_s * view_pendulo2; } ); // HtmlView Page linking property 'Visibility' for element 's_trace2'
          _view.s_trace2.linkProperty("SizeY",  function() { return dsy1; }, function(_v) { dsy1 = _v; } ); // HtmlView Page linking property 'SizeY' for element 's_trace2'
          _view.r.linkProperty("SizeX",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'SizeX' for element 'r'
          _view.r.linkProperty("Visibility",  function() { return view_r; }, function(_v) { view_r = _v; } ); // HtmlView Page linking property 'Visibility' for element 'r'
          _view.r.linkProperty("SizeY",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'SizeY' for element 'r'
          _view.v.linkProperty("SizeX",  function() { return vx; }, function(_v) { vx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'v'
          _view.v.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'v'
          _view.v.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'v'
          _view.v.linkProperty("Visibility",  function() { return view_v; }, function(_v) { view_v = _v; } ); // HtmlView Page linking property 'Visibility' for element 'v'
          _view.v.linkProperty("SizeY",  function() { return vy; }, function(_v) { vy = _v; } ); // HtmlView Page linking property 'SizeY' for element 'v'
          _view.a.linkProperty("SizeX",  function() { return ax; }, function(_v) { ax = _v; } ); // HtmlView Page linking property 'SizeX' for element 'a'
          _view.a.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'a'
          _view.a.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'a'
          _view.a.linkProperty("Visibility",  function() { return view_a; }, function(_v) { view_a = _v; } ); // HtmlView Page linking property 'Visibility' for element 'a'
          _view.a.linkProperty("SizeY",  function() { return ay; }, function(_v) { ay = _v; } ); // HtmlView Page linking property 'SizeY' for element 'a'
          _view.asv.linkProperty("SizeX",  function() { return axt; }, function(_v) { axt = _v; } ); // HtmlView Page linking property 'SizeX' for element 'asv'
          _view.asv.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'asv'
          _view.asv.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'asv'
          _view.asv.linkProperty("Visibility",  function() { return view_as; }, function(_v) { view_as = _v; } ); // HtmlView Page linking property 'Visibility' for element 'asv'
          _view.asv.linkProperty("SizeY",  function() { return ayt; }, function(_v) { ayt = _v; } ); // HtmlView Page linking property 'SizeY' for element 'asv'
          _view.T.linkProperty("SizeX",  function() { return 0.5*Tx; } ); // HtmlView Page linking property 'SizeX' for element 'T'
          _view.T.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'T'
          _view.T.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'T'
          _view.T.linkProperty("Visibility",  function() { return view_T; }, function(_v) { view_T = _v; } ); // HtmlView Page linking property 'Visibility' for element 'T'
          _view.T.linkProperty("SizeY",  function() { return 0.5*Ty; } ); // HtmlView Page linking property 'SizeY' for element 'T'
          _view.P.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'P'
          _view.P.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'P'
          _view.P.linkProperty("Visibility",  function() { return view_P; }, function(_v) { view_P = _v; } ); // HtmlView Page linking property 'Visibility' for element 'P'
          _view.P.linkProperty("SizeY",  function() { return -0.5*P; } ); // HtmlView Page linking property 'SizeY' for element 'P'
          _view.text_end.linkProperty("X",  function() { return xmax-0.05*Lx; } ); // HtmlView Page linking property 'X' for element 'text_end'
          _view.text_end.linkProperty("Y",  function() { return ymin+0.05*Ly; } ); // HtmlView Page linking property 'Y' for element 'text_end'
          _view.text_end.linkProperty("Visibility",  function() { return view_end; }, function(_v) { view_end = _v; } ); // HtmlView Page linking property 'Visibility' for element 'text_end'
          _view.rightPanel.linkProperty("Height",  function() { return middleHeight; }, function(_v) { middleHeight = _v; } ); // HtmlView Page linking property 'Height' for element 'rightPanel'
          _view.plottingPanel2.linkProperty("MinimumX",  function() { return tmin; }, function(_v) { tmin = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("MinimumY",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("MaximumY",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel2'
          _view.plottingPanel2.linkProperty("MaximumX",  function() { return tmax; }, function(_v) { tmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel2'
          _view.s2.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 's2'
          _view.s2.linkProperty("Visibility",  function() { return view_s&&view_pendulo2; } ); // HtmlView Page linking property 'Visibility' for element 's2'
          _view.s2.linkProperty("InputY",  function() { return s1; }, function(_v) { s1 = _v; } ); // HtmlView Page linking property 'InputY' for element 's2'
          _view.s.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 's'
          _view.s.linkProperty("Visibility",  function() { return view_s; }, function(_v) { view_s = _v; } ); // HtmlView Page linking property 'Visibility' for element 's'
          _view.s.linkProperty("InputY",  function() { return s; }, function(_v) { s = _v; } ); // HtmlView Page linking property 'InputY' for element 's'
          _view.as.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'as'
          _view.as.linkProperty("Visibility",  function() { return view_as; }, function(_v) { view_as = _v; } ); // HtmlView Page linking property 'Visibility' for element 'as'
          _view.as.linkProperty("InputY",  function() { return as; }, function(_v) { as = _v; } ); // HtmlView Page linking property 'InputY' for element 'as'
          _view.vs.linkProperty("InputX",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'InputX' for element 'vs'
          _view.vs.linkProperty("Visibility",  function() { return view_vs; }, function(_v) { view_vs = _v; } ); // HtmlView Page linking property 'Visibility' for element 'vs'
          _view.vs.linkProperty("InputY",  function() { return vs; }, function(_v) { vs = _v; } ); // HtmlView Page linking property 'InputY' for element 'vs'
          _view.bottomPanel.linkProperty("Width",  function() { return mainWidth; }, function(_v) { mainWidth = _v; } ); // HtmlView Page linking property 'Width' for element 'bottomPanel'
          _view.initButton.setAction("OnClick", _initialize); // HtmlView Page setting action 'OnClick' for element 'initButton'
          _view.playPauseButton.setAction("OffClick", _pause); // HtmlView Page setting action 'OffClick' for element 'playPauseButton'
          _view.playPauseButton.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton'
          _view.playPauseButton.setAction("OnClick", _play); // HtmlView Page setting action 'OnClick' for element 'playPauseButton'
          _view.stepButton.setAction("OnClick", _step); // HtmlView Page setting action 'OnClick' for element 'stepButton'
          _view.resetButton.setAction("OnClick", _reset); // HtmlView Page setting action 'OnClick' for element 'resetButton'
          _view.timeField.linkProperty("Value",  function() { return t; }, function(_v) { t = _v; } ); // HtmlView Page linking property 'Value' for element 'timeField'
          _view.view_r.linkProperty("Checked",  function() { return view_r; }, function(_v) { view_r = _v; } ); // HtmlView Page linking property 'Checked' for element 'view_r'
          _view.view_v.linkProperty("Checked",  function() { return view_v; }, function(_v) { view_v = _v; } ); // HtmlView Page linking property 'Checked' for element 'view_v'
          _view.view_a.linkProperty("Checked",  function() { return view_a; }, function(_v) { view_a = _v; } ); // HtmlView Page linking property 'Checked' for element 'view_a'
          _view.view_s.linkProperty("Checked",  function() { return view_s; }, function(_v) { view_s = _v; } ); // HtmlView Page linking property 'Checked' for element 'view_s'
          _view.view_vs.linkProperty("Checked",  function() { return view_vs; }, function(_v) { view_vs = _v; } ); // HtmlView Page linking property 'Checked' for element 'view_vs'
          _view.view_as.linkProperty("Checked",  function() { return view_as; }, function(_v) { view_as = _v; } ); // HtmlView Page linking property 'Checked' for element 'view_as'
          _view.view_P.linkProperty("Checked",  function() { return view_P; }, function(_v) { view_P = _v; } ); // HtmlView Page linking property 'Checked' for element 'view_P'
          _view.view_T.linkProperty("Checked",  function() { return view_T; }, function(_v) { view_T = _v; } ); // HtmlView Page linking property 'Checked' for element 'view_T'
          _view.view_pendulo2.linkProperty("Checked",  function() { return view_pendulo2; }, function(_v) { view_pendulo2 = _v; } ); // HtmlView Page linking property 'Checked' for element 'view_pendulo2'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(200);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function pendulo1_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = pendulo1_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);

  _view._addDescriptionPage('IntroduÃ§Ã£o','./pendulo1_Intro_1.html');

  return _view;
} // end of main function

function pendulo1_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"titlePanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'titlePanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"borderLabel", _view.titlePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'borderLabel'
      .setProperty("Text","<h2>Oscilador harmÃ´nico simples</h2> ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'borderLabel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"simPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'simPanel'
      .setProperty("CSS",{"page-break-inside":"avoid", "display":"block", "margin-left":"auto", "margin-right":"auto", "margin-top":"0", "margin-bottom":"0"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'simPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"tablePanel", _view.simPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'tablePanel'
      .setProperty("CSS",{"display":"table", "table-layout":"auto", "margin-left":"auto", "margin-right":"auto", "border":"none", "padding":"0px", "vertical-align": "top" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'tablePanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"topPanel", _view.tablePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topPanel'
      .setProperty("CSS",{"display":"table-row", "vertical-align": "center", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'topPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"topCell1", _view.topPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topCell1'
      .setProperty("CSS",{"display":"table-cell", "vertical-align": "top", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'topCell1'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"topCell2", _view.topPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topCell2'
      .setProperty("CSS",{"display":"table-cell", "vertical-align": "top", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'topCell2'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider2", _view.topCell2) // EJsS HtmlView.HtmlView Page: declaration of element 'slider2'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'slider2'
      .setProperty("Maximum",15) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider2'
      .setProperty("CSS",{"width":"80%"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'slider2'
      .setProperty("Minimum",1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider2'
      .setProperty("Background","LightGray") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'slider2'
      .setProperty("Font","normal normal 11px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'slider2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"topCell3", _view.topPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'topCell3'
      .setProperty("CSS",{"display":"table-cell", "vertical-align": "top", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'topCell3'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"slider22", _view.topCell3) // EJsS HtmlView.HtmlView Page: declaration of element 'slider22'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'slider22'
      .setProperty("Maximum",10) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'slider22'
      .setProperty("CSS",{"width":"80%"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'slider22'
      .setProperty("Minimum",1) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'slider22'
      .setProperty("Background","rgba(192,192,255,1)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'slider22'
      .setProperty("Font","normal normal 11px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'slider22'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"middlePanel", _view.tablePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'middlePanel'
      .setProperty("CSS",{"display":"table-row", "vertical-align": "middle", "border":"none", "padding":"0px", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'middlePanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"leftPanel", _view.middlePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'leftPanel'
      .setProperty("CSS",{"display":"table-cell", "vertical-align": "center", "width":"50px", "border":"none", "padding":"0px", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'leftPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"centerPanel", _view.middlePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'centerPanel'
      .setProperty("CSS",{"display":"table-cell", "vertical-align": "center", "border":"none", "padding":"0px", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'centerPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.centerPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("CSS",{"display":"block"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("Title","") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"x_axis", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'x_axis'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'x_axis'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'x_axis'
      .setProperty("SizeY",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'x_axis'
      .setProperty("Offset","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'x_axis'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"y_axis", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'y_axis'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'y_axis'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'y_axis'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'y_axis'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"fio", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fio'
      .setProperty("LineColor","rgba(0,64,192,1)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'fio'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'fio'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'fio'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'fio'
      ;

    _view._addElement(EJSS_DRAWING2D.segment,"fio2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fio2'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'fio2'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'fio2'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'fio2'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'fio2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"particula", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'particula'
      .setProperty("FillColor","rgba(0,0,192,1)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'particula'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'particula'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'particula'
      .setProperty("EnabledPosition","ENABLED_X") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'particula'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"particula2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'particula2'
      .setProperty("FillColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'particula2'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'particula2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'particula2'
      .setProperty("EnabledPosition","ENABLED_NONE") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'particula2'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"s_trace", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 's_trace'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 's_trace'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 's_trace'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"s_trace2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 's_trace2'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 's_trace2'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 's_trace2'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"r", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'r'
      .setProperty("LineColor","rgba(64,128,255,1)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'r'
      .setProperty("X",0) // EJsS HtmlView.HtmlView Page: setting property 'X' for element 'r'
      .setProperty("Y",0) // EJsS HtmlView.HtmlView Page: setting property 'Y' for element 'r'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'r'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"v", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'v'
      .setProperty("LineColor","Black") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'v'
      .setProperty("LineWidth",0.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'v'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"a", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'a'
      .setProperty("LineColor","rgba(0,64,0,1)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'a'
      .setProperty("LineWidth",0.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'a'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"asv", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'asv'
      .setProperty("LineColor","rgba(0,64,0,1)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'asv'
      .setProperty("LineWidth",0.5) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'asv'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"T", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'T'
      .setProperty("LineColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'T'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'T'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"P", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'P'
      .setProperty("SizeX",0) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'P'
      .setProperty("LineColor","rgba(64,128,255,1)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'P'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'P'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text_end", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'text_end'
      .setProperty("RelativePosition","SOUTH_EAST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'text_end'
      .setProperty("Text","fim da simulaÃ§Ã£o") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'text_end'
      .setProperty("Font","normal normal 11px ") // EJsS HtmlView.HtmlView Page: setting property 'Font' for element 'text_end'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"rightPanel", _view.middlePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'rightPanel'
      .setProperty("CSS",{"display":"table-cell", "vertical-align": "center", "border":"none", "padding":"0px", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'rightPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel2", _view.rightPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel2'
      .setProperty("TitleY","") // EJsS HtmlView.HtmlView Page: setting property 'TitleY' for element 'plottingPanel2'
      .setProperty("TitleX","t(s)") // EJsS HtmlView.HtmlView Page: setting property 'TitleX' for element 'plottingPanel2'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel2'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel2'
      .setProperty("Title","") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel2'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"s2", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 's2'
      .setProperty("Maximum",10000) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 's2'
      .setProperty("Skip",100) // EJsS HtmlView.HtmlView Page: setting property 'Skip' for element 's2'
      .setProperty("LineColor","Red") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 's2'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 's2'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 's2'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"s", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 's'
      .setProperty("Maximum",10000) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 's'
      .setProperty("Skip",100) // EJsS HtmlView.HtmlView Page: setting property 'Skip' for element 's'
      .setProperty("LineColor","Blue") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 's'
      .setProperty("LineWidth",1) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 's'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 's'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"as", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'as'
      .setProperty("Maximum",10000) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'as'
      .setProperty("Skip",10) // EJsS HtmlView.HtmlView Page: setting property 'Skip' for element 'as'
      .setProperty("LineColor","rgba(0,64,0,1)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'as'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'as'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"vs", _view.plottingPanel2) // EJsS HtmlView.HtmlView Page: declaration of element 'vs'
      .setProperty("Maximum",10000) // EJsS HtmlView.HtmlView Page: setting property 'Maximum' for element 'vs'
      .setProperty("Skip",10) // EJsS HtmlView.HtmlView Page: setting property 'Skip' for element 'vs'
      .setProperty("LineColor","rgba(0,150,0,1)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'vs'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'vs'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"bottomPanel", _view.tablePanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bottomPanel'
      .setProperty("CSS",{"display":"table-row", "vertical-align": "center", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'bottomPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"bottomCell1", _view.bottomPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bottomCell1'
      .setProperty("CSS",{"display":"table-cell", "vertical-align": "top", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'bottomCell1'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"bottomCell2", _view.bottomPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bottomCell2'
      .setProperty("CSS",{"display":"table-cell", "vertical-align": "center", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'bottomCell2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"initButton", _view.bottomCell2) // EJsS HtmlView.HtmlView Page: declaration of element 'initButton'
      .setProperty("Tooltip","InÃ­cio") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'initButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/stepback.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'initButton'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton", _view.bottomCell2) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton'
      .setProperty("Tooltip","Inic/Para") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton'
      .setProperty("ImageOnUrl","/org/opensourcephysics/resources/controls/images/play.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOnUrl' for element 'playPauseButton'
      .setProperty("ImageOffUrl","/org/opensourcephysics/resources/controls/images/pause.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageOffUrl' for element 'playPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton", _view.bottomCell2) // EJsS HtmlView.HtmlView Page: declaration of element 'stepButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/stepforward.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'stepButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.bottomCell2) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/reset.gif") // EJsS HtmlView.HtmlView Page: setting property 'ImageUrl' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"timeLabel", _view.bottomCell2) // EJsS HtmlView.HtmlView Page: declaration of element 'timeLabel'
      .setProperty("Text","Tempo:") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'timeLabel'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"timeField", _view.bottomCell2) // EJsS HtmlView.HtmlView Page: declaration of element 'timeField'
      .setProperty("Width","50px") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'timeField'
      .setProperty("Format","0.00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'timeField'
      .setProperty("Editable",false) // EJsS HtmlView.HtmlView Page: setting property 'Editable' for element 'timeField'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"bottomCell3", _view.bottomPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'bottomCell3'
      .setProperty("CSS",{"display":"table-cell", "vertical-align": "top", "margin":"0px"}) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'bottomCell3'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"view_r", _view.bottomCell3) // EJsS HtmlView.HtmlView Page: declaration of element 'view_r'
      .setProperty("Text","r") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'view_r'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"view_v", _view.bottomCell3) // EJsS HtmlView.HtmlView Page: declaration of element 'view_v'
      .setProperty("Text","v") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'view_v'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"view_a", _view.bottomCell3) // EJsS HtmlView.HtmlView Page: declaration of element 'view_a'
      .setProperty("Text","a") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'view_a'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"view_s", _view.bottomCell3) // EJsS HtmlView.HtmlView Page: declaration of element 'view_s'
      .setProperty("Text","s") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'view_s'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"view_vs", _view.bottomCell3) // EJsS HtmlView.HtmlView Page: declaration of element 'view_vs'
      .setProperty("Text","vs") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'view_vs'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"view_as", _view.bottomCell3) // EJsS HtmlView.HtmlView Page: declaration of element 'view_as'
      .setProperty("Text","a_s") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'view_as'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"view_P", _view.bottomCell3) // EJsS HtmlView.HtmlView Page: declaration of element 'view_P'
      .setProperty("Text","P") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'view_P'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"view_T", _view.bottomCell3) // EJsS HtmlView.HtmlView Page: declaration of element 'view_T'
      .setProperty("Text","T") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'view_T'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"view_pendulo2", _view.bottomCell3) // EJsS HtmlView.HtmlView Page: declaration of element 'view_pendulo2'
      .setProperty("Text","p2") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'view_pendulo2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"textPanel", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'textPanel'
      .setProperty("Html","<h2>Pendulo Simples</h2> <p>Observe o O.H.S.</p> <ul>   <li>Visualise  a coordenadas da posiÃ§Ã£o, velociadade e aceleraÃ§Ã£o na direÃ§Ã£o tangencial.</li>   <li>Observe a relaÃ§Ã£o entre s e a_s</li>   <li>Identifique ao perÃ­odo do movimento</li>   <li>Indentifique a amplitude do movimento nas duas figuras</li>    <li>Calcule a frequÃªncia angular</li>   <li>Modifique a posiÃ§Ã£o da barra de arrastar da esquerda e repita os procedimentos anteriores? </li>   <li>O que variou quando vocÃª modificou a posiÃ§Ã£o dessa barra de arrastar?</li>   <li>Modifique a posiÃ§Ã£o da barra de arrastar da direita e repita os procedimentos anteriores? </li>   <li>O que variou quando vocÃª modificou a posiÃ§Ã£o dessa barra de arrastar?</li> </ul>") // EJsS HtmlView.HtmlView Page: setting property 'Html' for element 'textPanel'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      PÃªndulo Simples<br />
     <img alt="Logo" src="figs/pendulo1_pic.png" />
      </p>
      <p>
      <img alt="author image" src="figs/HAC_logo.png" />
 Humberto Carmona
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2020, Humberto Carmona, H. Carmona. Compiled with EJS 6.01 (201013)
</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="library/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new pendulo1("_topFrame","library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
